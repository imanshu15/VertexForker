/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vertexforker.screens;

import com.jme3.scene.Node;
import com.vertexforker.connection.ClientManager;
import com.vertexforker.connection.ServerListener;
import com.vertexforker.connection.ServerManager;
import com.vertexforker.entity.Player;
import com.vertexforker.manager.PlayerSessionManager;
import com.vertexforker.meta.Token;
import static com.vertexforker.screens.MainFrame.contentPanel;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import jme3tools.savegame.SaveGame;

/**
 *
 * @author TP Live
 */
public class GameFrame extends javax.swing.JFrame {

    private Node gameData;

    /**
     * Creates new form GameFrame
     */
    public GameFrame() {
        initComponents();
        noOfPlayersConnected = 0;
        gameData = (Node) SaveGame.loadGame("SaveGame/", "ForkerGameData");
        noOfPlayersDefined = gameData.getUserData("noPlayers");
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new ConfirmExit());
    }

    private class ConfirmExit extends WindowAdapter {

        @Override
        public void windowClosing(WindowEvent e) {
            int result = JOptionPane.showOptionDialog(
                    GameFrame.this,
                    "Are you sure you want to quit?",
                    "Exit Dialog", JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE, null, null,
                    null);

            if (result == JOptionPane.YES_OPTION) {
                if (ServerListener.svrData != null) {
                    ServerManager.endServer();
                } else {
                    ClientManager.endClient();
                }
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(JoinPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.exit(0);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        userPanel = new javax.swing.JPanel();
        userPanel1 = new javax.swing.JPanel();
        userPanel4 = new javax.swing.JPanel();
        userPanel3 = new javax.swing.JPanel();
        userPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(900, 600));
        getContentPane().setLayout(null);

        jPanel1.setOpaque(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(314, 90));
        getContentPane().add(jPanel1);
        jPanel1.setBounds(270, 250, 340, 100);

        userPanel.setOpaque(false);
        getContentPane().add(userPanel);
        userPanel.setBounds(350, 400, 240, 140);

        userPanel1.setOpaque(false);
        getContentPane().add(userPanel1);
        userPanel1.setBounds(40, 90, 240, 140);

        userPanel4.setOpaque(false);
        getContentPane().add(userPanel4);
        userPanel4.setBounds(520, 80, 240, 140);

        userPanel3.setOpaque(false);
        getContentPane().add(userPanel3);
        userPanel3.setBounds(640, 300, 250, 140);

        userPanel2.setOpaque(false);
        getContentPane().add(userPanel2);
        userPanel2.setBounds(10, 310, 240, 140);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/vertexforker/png/Game frame.png"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 900, 600);
        getContentPane().add(jPanel2);
        jPanel2.setBounds(290, 0, 240, 70);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GameFrame gm = new GameFrame();

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private static javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private static javax.swing.JPanel userPanel;
    private static javax.swing.JPanel userPanel1;
    private static javax.swing.JPanel userPanel2;
    private static javax.swing.JPanel userPanel3;
    private static javax.swing.JPanel userPanel4;
    // End of variables declaration//GEN-END:variables

    private int noOfPlayersConnected;
    private static int noOfPlayersDefined;

    public void setUpGameScreen() {
        clearAllPlayerPanels();
        ConcurrentHashMap<String, Player> allPlayers = PlayerSessionManager.getInstance().getAllPlayers();
        PlayerPanel player = null;
        //Set local player
        Player localPlayer = allPlayers.get(PlayerSessionManager.getInstance().getLocalPlayerKey());
        player = new PlayerPanel(localPlayer);
        userPanel.add(player);
        userPanel.repaint();
        int localPlayerPosition = localPlayer.getPlayerPosition();

        noOfPlayersDefined = localPlayer.getDefinedNoOfPlayers();
        jPanel1.removeAll();

        for (Map.Entry<String, Player> entry : allPlayers.entrySet()) {
            player = new PlayerPanel(entry.getValue());
            if (entry.getKey().compareTo(PlayerSessionManager.getInstance().getLocalPlayerKey()) != 0) {
                switch (entry.getValue().getPlayerPosition()) {
                    case 0:
                        setPlayers(localPlayerPosition, player);
                    default:
                        setPlayers(entry.getValue().getPlayerPosition(), player);
                        break;
                }
            }
        }

        if ((noOfPlayersDefined > allPlayers.size() && (!localPlayer.isGameStarted()))) {
            ServerInfoPanel ifPanel = new ServerInfoPanel(String.valueOf((noOfPlayersDefined - allPlayers.size())));
            jPanel1.add(ifPanel);
        }
        jPanel1.repaint();
    }

    private void setPlayers(int position, PlayerPanel player) {
        switch (position) {
            case 1:
                userPanel1.add(player);
                userPanel1.repaint();
                break;
            case 2:
                userPanel2.add(player);
                userPanel2.repaint();
                break;
            case 3:
                userPanel3.add(player);
                userPanel3.repaint();
                break;
            case 4:
                userPanel4.add(player);
                userPanel4.repaint();
                break;
        }
    }

    private void clearAllPlayerPanels() {
        userPanel.removeAll();
        userPanel1.removeAll();
        userPanel2.removeAll();
        userPanel3.removeAll();
        userPanel4.removeAll();

        userPanel.repaint();
        userPanel1.repaint();
        userPanel2.repaint();
        userPanel3.repaint();
        userPanel4.repaint();
    }

    public void autoExitGame() {
        JOptionPane.showMessageDialog(GameFrame.this,
                "Quitting...The Server has disconnectd.",
                "Server Error",
                JOptionPane.ERROR_MESSAGE);
        PlayerSessionManager.getInstance().replaceUserSessionMap(null);
        MainFrame f = new MainFrame();
        MenuPanel mp = new MenuPanel(contentPanel);
        contentPanel.add(mp);
        f.validate();
        f.repaint();
        f.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }

}
